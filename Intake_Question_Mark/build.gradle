plugins {
    id "java"
    id 'com.diffplug.spotless' version '6.12.0'
    id "edu.wpi.first.GradleRIO" version "2024.1.1"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Configuration for AdvantageKit




// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    implementation "gov.nist.math:jama:1.0.3"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui()
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Check selected robot when deploying


def writeGitData =tasks.create("writeGitData") {
    doLast(){
        // Define an output stream to write to instead of terminal
        def userstdout = new ByteArrayOutputStream()
        def rawtime= new Date();
        def mstr=(rawtime.toCalendar().get(Calendar.MONTH)+1).toString()
        def dstr=rawtime.toCalendar().get(Calendar.DAY_OF_MONTH).toString()
        def hrstr=rawtime.toCalendar().get(Calendar.HOUR_OF_DAY).toString()
        def minstr=rawtime.toCalendar().get(Calendar.MINUTE).toString()
        def secstr=rawtime.toCalendar().get(Calendar.SECOND).toString()
        def iso8601=rawtime.toCalendar().get(Calendar.YEAR).toString()+(mstr.length()==2?mstr:("0"+mstr))+(dstr.length()==2?dstr:("0"+dstr))+"_"+(hrstr.length()==2?hrstr:("0"+hrstr))+(minstr.length()==2?minstr:("0"+minstr))+(secstr.length()==2?secstr:("0"+secstr))

        exec {
            commandLine "git", "config", "--get", "user.name"
            // Write to the output stream instead of terminal
            standardOutput = userstdout
        }
        def tagname="zzzz_"+userstdout.toString().trim()+"_"+iso8601+"_deploy"
        exec {
            commandLine "git", "commit", "--allow-empty", "-m", "Staged changes during deploy at "+iso8601
        }
        exec {
            commandLine "git", "add", "."
        }
        exec {
            commandLine "git", "commit", "--allow-empty", "-m", "Unstaged changes during deploy at "+iso8601
        }
        exec {
            commandLine "git", "tag", tagname
        }
        exec {
            commandLine "git", "reset", "--soft", "HEAD^1"
        }
        exec {
            commandLine "git", "restore", "--staged", "."
        }
        exec {
            commandLine "git", "reset", "--soft", "HEAD^1"
        }
        // Create a new file
        new File(
                // Join project directory and deploy directory
                projectDir.toString() + "/src/main/deploy",
                // File name to write to
                "git_tag.txt"
                ).text = tagname
        new File(
                // Join project directory and deploy directory
                projectDir.toString() + "/src/main/deploy",
                // File name to write to
                "deployer.txt"
                ).text = userstdout.toString().trim()
    }}

deploy.targets.roborio.artifacts.frcStaticFileDeploy.dependsOn(writeGitData)


spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'xml', {
        target fileTree('.') {
            include '**/*.xml'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseWtp('xml')
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
